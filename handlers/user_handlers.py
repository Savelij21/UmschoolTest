
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, Update
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy import select
from sqlalchemy.orm import joinedload

import logging
from typing import List

from keyboards.user_keyboards import get_start_kb, get_back_to_start_kb, get_to_main_menu_kb, get_main_menu_kb, get_subjects_kb
from filters.user_filters import IsLoggedIn
from utils.utils import answer_for_update
from db.models import User, Subject, ExamResult
from states.user_states import RegisterUserStates, EnterScoreStates

logger = logging.getLogger(__name__)

router = Router()


# UNAUTHORIZED ---------------
# /start ----------------------------------------------------------------------------------------------------------
@router.callback_query(F.data == 'start')
@router.message(CommandStart())
async def process_start_command(update: Update, state: FSMContext):
    """
    –ü–æ –∫–æ–º–∞–Ω–¥–µ /start (–∏–ª–∏ –∫–Ω–æ–ø–∫–µ –∑–∞–ø—É—Å–∫–∞) –∏–ª–∏ –ø–æ –∫–æ–ª–±—ç–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    msg = ('<b>–ü—Ä–∏–≤–µ—Ç</b> üëã\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠ üíØ,'
           ' —á—Ç–æ–±—ã –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ —É —Ç–µ–±—è –ø–æ–¥ —Ä—É–∫–æ–π üëå\n\n'
           '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞ ü§ñ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <u>–≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</u>\n\n'
           '–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/main_menu</b> –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá\n\n'
           '–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–æ <u>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è</u> —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/register</b> '
           '–∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá')

    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º

    await answer_for_update(update, msg, get_start_kb())


# login -----------------------------------------------------------------------------------------------
@router.callback_query(F.data == 'login')
@router.message(Command(commands=['login']))
async def process_login_command(update: Update, state: FSMContext, session_maker: async_sessionmaker):
    async with session_maker() as session:
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ tg_id
        user = await session.get(User, update.from_user.id)
        if user is None:
            return await answer_for_update(
                update,
                text='–£–≤—ã, –Ω–æ —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ <b>–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b> –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ üòî\n\n',
                kb=get_back_to_start_kb()
            )

    await state.set_data({
        'is_logged': True,
        'first_name': user.first_name,
        'last_name': user.last_name
    })
    return await answer_for_update(
        update,
        text='–¢—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—å–∑—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ üòâ',
        kb=get_to_main_menu_kb()
    )


# process register ---------------------------------------------------------------------------------
@router.callback_query(F.data == 'register')
@router.message(Command(commands=['register']))
async def process_register_command(update: Update, state: FSMContext):
    await state.update_data(tg_id=update.from_user.id)
    msg = '<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b>\n\n–í–≤–µ–¥–∏ —Å–≤–æ–µ <b>–∏–º—è</b>'
    await state.set_state(RegisterUserStates.first_name_input)
    return await answer_for_update(update, msg)


@router.message(F.text, StateFilter(RegisterUserStates.first_name_input))
async def process_first_name_input(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    msg = '<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b>\n\n–í–≤–µ–¥–∏ —Å–≤–æ—é <b>—Ñ–∞–º–∏–ª–∏—é</b>'
    await state.set_state(RegisterUserStates.last_name_input)
    return await message.answer(msg)


@router.message(F.text, StateFilter(RegisterUserStates.last_name_input))
async def process_last_name_input(message: Message, state: FSMContext, session_maker: async_sessionmaker):
    await state.update_data(last_name=message.text)
    data = await state.get_data()
    # add user to db
    async with session_maker() as session:
        session.add(User(
            tg_id=data['tg_id'],
            first_name=data['first_name'],
            last_name=data['last_name']
        ))
        await session.commit()
    await state.clear()
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ —Å—Ç–µ–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞
    await state.set_data({
        'is_logged': True,
        'first_name': data['first_name'],
        'last_name': data['last_name']
    })
    await message.answer(
        text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç—ã <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b> üéâ',
        reply_markup=get_to_main_menu_kb()
    )


# for unauthorized redirect ---------------------------------------------------------------------------------------
@router.callback_query(~IsLoggedIn())
@router.message(~IsLoggedIn())
async def process_unauthorized_update(update: Update, state: FSMContext):
    """
    –†–∞–∑–≤–æ—Ä–æ—Ç –¥–ª—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    msg = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è <u>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòî\n\n'
           '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/register</b> –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá')

    await answer_for_update(update, msg, get_back_to_start_kb())


# AUTHORIZED ----------------------------------------------------------------------------------------
# --- main menu ---------------------------------------------------------------------------------------
@router.callback_query(F.data == 'main_menu', IsLoggedIn())
@router.message(Command(commands=['main_menu']), IsLoggedIn())
async def process_main_menu_command(update: Update, state: FSMContext):
    data = await state.get_data()
    msg = (f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> [{data["first_name"]} {data["last_name"]}]\n\n'
           f'–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å <u>–∑–∞–Ω–µ—Å—Ç–∏</u> —Å–≤–æ–∏ –±–∞–ª–ª—ã –ï–ì–≠ üìù —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '
           f'<b>/enter_scores</b> –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá\n\n'
           f'–ï—Å–ª–∏ —Ç—ã —É–∂–µ –∑–∞–Ω–æ—Å–∏–ª —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–æ –º–æ–∂–µ—à—å <u>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å</u> –∏—Ö üìã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '
           f'<b>/view_scores</b> –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá\n\n')

    await answer_for_update(update, msg, get_main_menu_kb())


# --- process enter scores -----------------------------------------------------------------------------
@router.callback_query(F.data == 'enter_scores', IsLoggedIn())
@router.message(Command(commands=['enter_scores']), IsLoggedIn())
async def process_enter_scores_command(update: Update, state: FSMContext, session_maker: async_sessionmaker):
    async with session_maker() as session:
        result = await session.execute(select(Subject))
        subjects: List[Subject] = list(result.scalars().all())

    await state.set_state(EnterScoreStates.select_subject)
    await answer_for_update(
        update,
        text='–í—ã–±–µ—Ä–∏ <b>–ø—Ä–µ–¥–º–µ—Ç</b> üìö',
        kb=get_subjects_kb(subjects=subjects)
    )


@router.callback_query(EnterScoreStates.select_subject, IsLoggedIn())
async def process_subject_selection(callback: CallbackQuery, state: FSMContext, session_maker: async_sessionmaker):
    await state.update_data(subject_id=callback.data.replace('subject_', ''))

    await state.set_state(EnterScoreStates.score_input)
    await callback.message.edit_text(
        text='–í–≤–µ–¥–∏ —Å–≤–æ–π <b>—Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –æ—Ç 0 –¥–æ 100)</b> –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É üî¢',
        reply_markup=None
    )


@router.message(EnterScoreStates.score_input, IsLoggedIn())
async def process_score_input(message: Message, state: FSMContext, session_maker: async_sessionmaker):
    try:
        score = int(message.text)
        if score < 0 or score > 100:
            raise ValueError
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100')
        return

    data = await state.get_data()
    await state.clear()
    await state.set_data({
        'is_logged': True,
        'first_name': data['first_name'],
        'last_name': data['last_name'],
    })

    async with session_maker() as session:
        session.add(ExamResult(
            user_id=message.from_user.id,
            subject_id=int(data['subject_id']),
            score=score
        ))
        await session.commit()

    await message.answer(
        text='–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã üíæ',
        reply_markup=get_to_main_menu_kb()
    )


# view scores ---------------------------------------------------------------------------------------
@router.callback_query(F.data == 'view_scores', IsLoggedIn())
@router.message(Command(commands=['view_scores']), IsLoggedIn())
async def process_view_scores_command(update: Update, state: FSMContext, session_maker: async_sessionmaker):

    async with session_maker() as session:
        result = await session.execute(
            select(ExamResult)
            .options(joinedload(ExamResult.subject))
            .where(ExamResult.user_id == update.from_user.id)
        )
        exam_results: List[ExamResult] = list(result.scalars().all())

    # -- –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤–≤–æ–¥–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–Ω–µ–µ
    if len(exam_results) == 0:
        return await answer_for_update(
            update,
            text='–¢—ã –µ—â–µ –Ω–µ –≤–≤–æ–¥–∏–ª —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã :(',
            kb=get_to_main_menu_kb()
        )

    header = "<b>–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
    text = "\n".join(
        f"<b>{exam_result.subject.name}</b>: {exam_result.score}" for exam_result in exam_results
    )

    return await answer_for_update(
        update,
        text=header + text,
        kb=get_to_main_menu_kb()
    )
